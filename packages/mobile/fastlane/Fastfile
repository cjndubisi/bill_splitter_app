fastlane_version '2.141.0'

before_all do |lane, options|
  ensure_git_status_clean(show_uncommitted_changes: true) if is_ci?
  if is_ci? && ENV["FASTLANE_PLATFORM_NAME"] == 'ios'
    create_ci_keychain
  end
end

after_all do |lane, options|
  if is_ci? && ENV["FASTLANE_PLATFORM_NAME"] == 'ios'
    delete_ci_keychain
  end
end

error do |lane, exception|
  if is_ci? && ENV["FASTLANE_PLATFORM_NAME"] == 'ios'
    delete_ci_keychain
  end
end

private_lane :options_for_branch do | options |
  {
    app_identifier: 'challenge.BillSplit',
    export_type: git_branch == 'master' ? 'app-store' : 'ad-hoc',
    match_type: git_branch == 'master' ? 'appstore' : 'adhoc',
    match_profile_name: git_branch == 'master' ? 'match AppStore challenge.BillSplit' : 'match AdHoc challenge.BillSplit'
  }
end

platform :ios do
  # iOS Lanes

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(app_identifier: 'challenge.BillSplit', type: 'development', readonly: false) unless ci?
    match(app_identifier: 'challenge.BillSplit', type: 'adhoc', readonly: ci?, clone_branch_directly: true)
    match(app_identifier: 'challenge.BillSplit', type: 'appstore', readonly: ci?, clone_branch_directly: true)
  end

  desc 'Build the iOS application.'
  private_lane :build do
    options = options_for_branch

    clear_derived_data
    cocoapods(
      podfile: 'ios/Podfile',
      repo_update: true,
      use_bundle_exec: true,
    )

    certificates
    increment_build_number(xcodeproj: './ios/BillSplit.xcodeproj')

    gym(
      scheme: 'BillSplit',
      workspace: './ios/BillSplit.xcworkspace',
      configuration: 'Release',
      clean: true,
      export_method: options[:export_type],
      export_options: {
        method: options[:export_type],
        provisioningProfiles: { 
          'challenge.BillSplit' => options[:match_profile_name]
        }
      }
    )
  end

  desc 'Ship to AppCenter'
  lane :alpha do
    build
    appcenter_upload(
      api_token: ENV['APPCENTER_API_TOKEN'],
      owner_name: 'cjndubisi',
      app_name: 'BillSplit-iOS',
      notify_testers: true,
      app_os: 'iOS',
      dsym: ENV['FASTLANE_OUTPUT_DIRECTORY'],
      ipa: ENV['FASTLANE_OUTPUT_DIRECTORY']
    )

    commit_version_bump(message: '[skip ci] Bump build', xcodeproj: 'ios/BillSplit.xcodeproj')
    push_to_git_remote(
      remote_branch: git_branch,
      tags: false
    )
  end

  private_lane :create_ci_keychain do
    keychain_name = 'ci_keychain'
    ENV['KEYCHAIN_NAME'] = keychain_name
    ENV['KEYCHAIN_PASSWORD'] = keychain_name
    ENV['MATCH_KEYCHAIN_NAME'] = keychain_name
    ENV['MATCH_KEYCHAIN_PASSWORD'] = keychain_name

    create_keychain(
      name: keychain_name,
      password: keychain_name,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    )
  end

  private_lane :delete_ci_keychain do
    delete_keychain(name: 'ci_keychain')
  end
end

platform :android do
  # Android Lanes

  desc 'Build the Android application.'
  private_lane :build do
    sh 'ln -s  `which node` /usr/local/bin/node'
    gradle(task: 'incrementVersionCode', project_dir: 'android/')
    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')
  end

  desc 'Ship to AppCenter'
  lane :alpha do
    build_keystore
    build
    appcenter_upload(
      api_token: ENV['APPCENTER_API_TOKEN'],
      owner_name: 'cjndubisi',
      app_name: 'BillSplit',
      app_platform: 'Java',
      app_os: 'Android',
      notify_testers: true,
      file: './android/app/build/outputs/apk/release/app-release.apk'
    )
    git_commit(path: ['./android/gradle.properties'], message: '[skip ci] Bump versionCode')
    push_to_git_remote(
      remote_branch: git_branch,
      tags: false
    )
  end

  lane :build_keystore do 
    sh 'echo $RELEASE_KEY_STORE | base64 -d > ../android/app/wanted-android-releasekey.keystore'
    sh 'echo \'APP_RELEASE_STORE_FILE=wanted-android-releasekey.keystore\' >> ../android/signing.properties'
    sh 'echo \'APP_RELEASE_KEY_ALIAS=$RELEASE_KEYSTORE_KEY_ALIAS\' >> ../android/signing.properties'
    sh 'echo \'APP_RELEASE_STORE_PASSWORD=$RELEASE_KEYSTORE_STORE_PASSWORD\' >> ../android/signing.properties'
    sh 'echo \'APP_RELEASE_KEY_PASSWORD=$RELEASE_KEYSTORE_KEY_PASSWORD\' >> ../android/signing.properties'
  end
end